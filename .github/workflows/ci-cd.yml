name: CI/CD Pipeline

on:
  push:
    branches: [main, feature/vsCode]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18.18.0'
  DATABASE_URL: "file:./dev.db"
  DATABASE_PROVIDER: "sqlite"
  NEXTAUTH_URL: "http://localhost:3000"
  NEXTAUTH_SECRET: "test-secret-key-for-testing-only-123456789"

jobs:
  frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Generate Prisma client
        run: npm run db:generate --workspace=frontend

      - name: Typecheck
        run: npm run typecheck --workspace=frontend

      - name: Lint
        run: npm run lint --workspace=frontend

      - name: Run frontend tests
        run: npm run test --workspace=frontend

      - name: Build frontend
        run: npm run build --workspace=frontend
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          NEXTAUTH_URL: ${{ env.NEXTAUTH_URL }}
          NEXTAUTH_SECRET: ${{ env.NEXTAUTH_SECRET }}

      - name: Upload frontend build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/.next

  backend:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Generate Prisma client
        run: npm run db:generate --workspace=backend

      - name: Run database migrations
        run: npm run db:push --workspace=backend
        env:
          DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/test_db"

      - name: Typecheck
        run: npm run typecheck --workspace=backend

      - name: Run backend tests
        run: npm run test --workspace=backend
        env:
          DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/test_db"

      - name: Build backend
        run: npm run build --workspace=backend

      - name: Upload backend build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: backend/dist

  integration:
    runs-on: ubuntu-latest
    needs: [frontend, backend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Download frontend build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend/.next

      - name: Download backend build artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-build
          path: backend/dist

      - name: Setup test database
        run: |
          npm run db:generate --workspace=frontend
          npm run db:push --workspace=frontend
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}

      - name: Seed test data
        run: npm run db:seed:learning --workspace=frontend
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}

      - name: Run integration tests
        run: npm run test:integration
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          NEXTAUTH_URL: ${{ env.NEXTAUTH_URL }}
          NEXTAUTH_SECRET: ${{ env.NEXTAUTH_SECRET }}

  security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Check for outdated packages
        run: npm outdated

      - name: Lint code
        run: npm run lint --workspaces

      - name: Typecheck
        run: npm run typecheck --workspaces

  deploy-production:
    runs-on: ubuntu-latest
    needs: [frontend, backend, integration, security]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'

      - name: Health check
        run: |
          sleep 30
          curl -f ${{ secrets.VERCEL_URL }}/health || exit 1

  deploy-preview:
    runs-on: ubuntu-latest
    needs: [frontend, backend, integration, security]
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Vercel Preview
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--target=preview'
