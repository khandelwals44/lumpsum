name: CI

on:
  pull_request:
    branches: [ main, release/V_2.0 ]
  push:
    branches: [ feature/vsCode-complete, chore/preview-env-and-ci-parity ]

jobs:
  prisma-generate:
    name: Prisma Generate
    runs-on: ubuntu-latest
    defaults: { run: { working-directory: frontend } }
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: 20, cache: npm, cache-dependency-path: frontend/package-lock.json }
      - run: npm ci
      - name: Setup .env for CI
        run: |
          echo 'DATABASE_URL="file:./dev.db"' > .env
          echo 'NEXTAUTH_URL="http://localhost:3000"' >> .env
          echo 'NEXTAUTH_SECRET="testsecret"' >> .env
          echo 'GOOGLE_CLIENT_ID="test"' >> .env
          echo 'GOOGLE_CLIENT_SECRET="test"' >> .env
          echo 'RECAPTCHA_SECRET_KEY="test"' >> .env
      - run: npx prisma generate --schema frontend/prisma/schema.prisma

  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: [prisma-generate]
    defaults: { run: { working-directory: frontend } }
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: 20, cache: npm, cache-dependency-path: frontend/package-lock.json }
      - run: npm ci
      - name: Setup .env for CI
        run: |
          echo 'DATABASE_URL="file:./dev.db"' > .env
          echo 'NEXTAUTH_URL="http://localhost:3000"' >> .env
          echo 'NEXTAUTH_SECRET="testsecret"' >> .env
          echo 'GOOGLE_CLIENT_ID="test"' >> .env
          echo 'GOOGLE_CLIENT_SECRET="test"' >> .env
          echo 'RECAPTCHA_SECRET_KEY="test"' >> .env
      - run: npm run lint

  typecheck:
    name: Type Check
    runs-on: ubuntu-latest
    needs: [prisma-generate]
    defaults: { run: { working-directory: frontend } }
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: 20, cache: npm, cache-dependency-path: frontend/package-lock.json }
      - run: npm ci
      - run: npm run typecheck

  audit:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: [prisma-generate]
    defaults: { run: { working-directory: frontend } }
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: 20, cache: npm, cache-dependency-path: frontend/package-lock.json }
      - run: npm ci
      - run: npm audit --audit-level=high || true

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, typecheck, prisma-generate]
    defaults: { run: { working-directory: frontend } }
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: 20, cache: npm, cache-dependency-path: frontend/package-lock.json }
      - run: npm ci
      - run: npx prisma generate --schema frontend/prisma/schema.prisma
      - run: npm run build

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: [prisma-generate]
    defaults: { run: { working-directory: frontend } }
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: 20, cache: npm, cache-dependency-path: frontend/package-lock.json }
      - run: npm ci
      - run: npm test -- --ci --reporters=default

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    if: ${{ hashFiles('frontend/cypress/**') != '' }}
    needs: [build]
    defaults: { run: { working-directory: frontend } }
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: 20, cache: npm, cache-dependency-path: frontend/package-lock.json }
      - run: npm ci
      - run: npx prisma generate --schema frontend/prisma/schema.prisma
      - run: npm run e2e --if-present


