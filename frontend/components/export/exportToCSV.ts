interface ExportData {
  inputs: Record<string, any>;
  results: Record<string, any>;
  chartData?: any[];
}

export async function exportToCSV(
  data: ExportData,
  title: string,
  calculatorType: string
): Promise<void> {
  let csvContent = `"${title}"\n`;
  csvContent += `"Calculator Type","${calculatorType}"\n`;
  csvContent += `"Generated Date","${new Date().toLocaleDateString()}"\n`;
  csvContent += `"Generated Time","${new Date().toLocaleTimeString()}"\n\n`;

  // Input parameters
  csvContent += `"Input Parameters"\n`;
  csvContent += `"Parameter","Value"\n`;
  Object.entries(data.inputs).forEach(([key, value]) => {
    csvContent += `"${key}","${value}"\n`;
  });

  csvContent += `\n"Results"\n`;
  csvContent += `"Result","Value"\n`;
  Object.entries(data.results).forEach(([key, value]) => {
    const formattedValue = typeof value === 'number' ? value.toLocaleString() : value;
    csvContent += `"${key}","${formattedValue}"\n`;
  });

  // Chart data (if available)
  if (data.chartData && data.chartData.length > 0) {
    csvContent += `\n"Chart Data"\n`;
    const headers = Object.keys(data.chartData[0]);
    csvContent += headers.map(h => `"${h}"`).join(',') + '\n';
    data.chartData.forEach(row => {
      csvContent += headers.map(h => `"${row[h]}"`).join(',') + '\n';
    });
  }

  csvContent += `\n"Generated by lumpsum.in"\n`;

  // Create and download the file
  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
  const link = document.createElement('a');
  const url = URL.createObjectURL(blob);
  link.setAttribute('href', url);
  link.setAttribute('download', `${calculatorType}_${new Date().toISOString().split('T')[0]}.csv`);
  link.style.visibility = 'hidden';
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
}

