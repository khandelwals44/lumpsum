interface ExportData {
  inputs: Record<string, any>;
  results: Record<string, any>;
  chartData?: any[];
  monthlyBreakdown?: any[];
  yearlyBreakdown?: any[];
  summary?: Record<string, any>;
  absoluteReturn?: number;
  cagr?: number;
}

export async function exportToCSV(
  data: ExportData,
  title: string,
  calculatorType: string
): Promise<void> {
  let csvContent = `"LUMPSUM.IN - ${title}"\n`;
  csvContent += `"Calculator Type","${calculatorType}"\n`;
  csvContent += `"Generated Date","${new Date().toLocaleDateString()}"\n`;
  csvContent += `"Generated Time","${new Date().toLocaleTimeString()}"\n`;
  csvContent += `"Generated By","lumpsum.in"\n\n`;

  // Executive Summary Section
  csvContent += `"EXECUTIVE SUMMARY"\n`;
  csvContent += `"Metric","Value"\n`;

  if (data.absoluteReturn !== undefined) {
    csvContent += `"Absolute Return","₹${data.absoluteReturn.toLocaleString('en-IN', { maximumFractionDigits: 2 })}"\n`;
  }

  if (data.cagr !== undefined) {
    csvContent += `"CAGR","${data.cagr.toFixed(2)}%"\n`;
  }

  if (data.summary) {
    Object.entries(data.summary).forEach(([key, value]) => {
      csvContent += `"${key.replace(/([A-Z])/g, ' $1').trim()}","${typeof value === 'number' ? value.toLocaleString('en-IN', { maximumFractionDigits: 2 }) : value}"\n`;
    });
  }
  csvContent += `\n`;

  // Input Parameters Section
  csvContent += `"INPUT PARAMETERS"\n`;
  csvContent += `"Parameter","Value","Description"\n`;
  Object.entries(data.inputs).forEach(([key, value]) => {
    csvContent += `"${key.replace(/([A-Z])/g, ' $1').trim()}","${value}",""\n`;
  });
  csvContent += `\n`;

  // Calculation Results Section
  csvContent += `"CALCULATION RESULTS"\n`;
  csvContent += `"Result","Value","Notes"\n`;
  Object.entries(data.results).forEach(([key, value]) => {
    const formattedValue = typeof value === 'number' ? value.toLocaleString('en-IN', { maximumFractionDigits: 2 }) : value;
    csvContent += `"${key.replace(/([A-Z])/g, ' $1').trim()}","${formattedValue}",""\n`;
  });
  csvContent += `\n`;

  // Monthly Breakdown Section (if available)
  if (data.monthlyBreakdown && data.monthlyBreakdown.length > 0 && data.monthlyBreakdown[0]) {
    csvContent += `"MONTHLY BREAKDOWN"\n`;

    // Add headers
    const monthlyBreakdown = data.monthlyBreakdown; // Type guard
    const headers = Object.keys(monthlyBreakdown[0]);
    csvContent += headers.map(h => `"${h.replace(/([A-Z])/g, ' $1').trim()}"`).join(',') + '\n';

    // Add data rows (limit to first 60 months to avoid too large CSV)
    const displayData = monthlyBreakdown.slice(0, 60);
    displayData.forEach((row) => {
      csvContent += headers.map(header => {
        const value = row[header];
        if (typeof value === 'number') {
          return `"${value.toLocaleString('en-IN', { maximumFractionDigits: 2 })}"`;
        }
        return `"${value}"`;
      }).join(',') + '\n';
    });

    // Add summary statistics
    if (data.monthlyBreakdown && data.monthlyBreakdown.length > 1 && data.monthlyBreakdown[0]) {
      csvContent += `\n"SUMMARY STATISTICS"\n`;
      csvContent += `"Statistic","Value"\n`;

      const monthlyBreakdown = data.monthlyBreakdown; // Type guard
      const numericHeaders = headers.filter(header => typeof monthlyBreakdown[0][header] === 'number');
      numericHeaders.forEach(header => {
        const values = monthlyBreakdown.map(row => row[header]).filter(v => typeof v === 'number');
        if (values.length > 0) {
          const min = Math.min(...values);
          const max = Math.max(...values);
          const avg = values.reduce((a, b) => a + b, 0) / values.length;
          const total = values.reduce((a, b) => a + b, 0);

          csvContent += `"${header.replace(/([A-Z])/g, ' $1').trim()} - Minimum","${min.toLocaleString('en-IN', { maximumFractionDigits: 2 })}"\n`;
          csvContent += `"${header.replace(/([A-Z])/g, ' $1').trim()} - Maximum","${max.toLocaleString('en-IN', { maximumFractionDigits: 2 })}"\n`;
          csvContent += `"${header.replace(/([A-Z])/g, ' $1').trim()} - Average","${avg.toLocaleString('en-IN', { maximumFractionDigits: 2 })}"\n`;
          csvContent += `"${header.replace(/([A-Z])/g, ' $1').trim()} - Total","${total.toLocaleString('en-IN', { maximumFractionDigits: 2 })}"\n`;
        }
      });
    }

    if (data.monthlyBreakdown && data.monthlyBreakdown.length > 60) {
      csvContent += `\n"Note: Only first 60 months shown. Full data available in Excel export."\n`;
    }
    csvContent += `\n`;
  }

  // Yearly Breakdown Section (if available)
  if (data.yearlyBreakdown && data.yearlyBreakdown.length > 0 && data.yearlyBreakdown[0]) {
    csvContent += `"YEARLY BREAKDOWN"\n`;

    // Add headers
    const yearlyBreakdown = data.yearlyBreakdown; // Type guard
    const yearHeaders = Object.keys(yearlyBreakdown[0]);
    csvContent += yearHeaders.map(h => `"${h.replace(/([A-Z])/g, ' $1').trim()}"`).join(',') + '\n';

    // Add data rows
    yearlyBreakdown.forEach((row) => {
      csvContent += yearHeaders.map(header => {
        const value = row[header];
        if (typeof value === 'number') {
          return `"${value.toLocaleString('en-IN', { maximumFractionDigits: 2 })}"`;
        }
        return `"${value}"`;
      }).join(',') + '\n';
    });

    // Add CAGR calculation if applicable
    if (yearlyBreakdown.length > 1 && yearlyBreakdown[0].value && yearlyBreakdown[yearlyBreakdown.length - 1].value) {
      csvContent += `\n"CAGR CALCULATION"\n`;
      csvContent += `"Metric","Value"\n`;

      const firstValue = yearlyBreakdown[0].value;
      const lastValue = yearlyBreakdown[yearlyBreakdown.length - 1].value;
      const years = yearlyBreakdown.length - 1;

      if (firstValue > 0) {
        const calculatedCagr = (Math.pow(lastValue / firstValue, 1 / years) - 1) * 100;
        csvContent += `"Calculated CAGR","${calculatedCagr.toFixed(2)}%"\n`;
        csvContent += `"Formula","(Ending Value / Beginning Value)^(1/Number of Years) - 1"\n`;
      }
    }
    csvContent += `\n`;
  }

  // Chart Data Section (if available)
  if (data.chartData && data.chartData.length > 0 && data.chartData[0]) {
    csvContent += `"CHART DATA"\n`;

    // Add headers
    const chartData = data.chartData; // Type guard
    const chartHeaders = Object.keys(chartData[0]);
    csvContent += chartHeaders.map(h => `"${h.replace(/([A-Z])/g, ' $1').trim()}"`).join(',') + '\n';

    // Add data rows
    chartData.forEach((row) => {
      csvContent += chartHeaders.map(header => {
        const value = row[header];
        if (typeof value === 'number') {
          return `"${value.toLocaleString('en-IN', { maximumFractionDigits: 2 })}"`;
        }
        return `"${value}"`;
      }).join(',') + '\n';
    });

    // Add chart statistics
    csvContent += `\n"CHART STATISTICS"\n`;
    csvContent += `"Statistic","Value"\n`;

    const numericHeaders = chartHeaders.filter(header => typeof chartData[0][header] === 'number');
    numericHeaders.forEach(header => {
      const values = chartData.map(row => row[header]).filter(v => typeof v === 'number');
      if (values.length > 0) {
        const min = Math.min(...values);
        const max = Math.max(...values);
        const avg = values.reduce((a, b) => a + b, 0) / values.length;

        csvContent += `"${header.replace(/([A-Z])/g, ' $1').trim()} - Minimum","${min.toLocaleString('en-IN', { maximumFractionDigits: 2 })}"\n`;
        csvContent += `"${header.replace(/([A-Z])/g, ' $1').trim()} - Maximum","${max.toLocaleString('en-IN', { maximumFractionDigits: 2 })}"\n`;
        csvContent += `"${header.replace(/([A-Z])/g, ' $1').trim()} - Average","${avg.toLocaleString('en-IN', { maximumFractionDigits: 2 })}"\n`;
        csvContent += `"${header.replace(/([A-Z])/g, ' $1').trim()} - Data Points","${values.length}"\n`;
      }
    });
    csvContent += `\n`;
  }

  // Financial Formulas Reference
  csvContent += `"FINANCIAL FORMULAS REFERENCE"\n`;
  csvContent += `"Formula Name","Formula","Description"\n`;
  csvContent += `"CAGR","(Ending Value / Beginning Value)^(1/Number of Years) - 1","Compound Annual Growth Rate"\n`;
  csvContent += `"Absolute Return","Ending Value - Beginning Value","Total Return Amount"\n`;
  csvContent += `"Future Value","PV × (1 + r)^n","Future Value of Investment"\n`;
  csvContent += `"Present Value","FV / (1 + r)^n","Present Value of Future Amount"\n`;
  csvContent += `"Compound Interest","P × (1 + r/n)^(nt)","Interest Compounded Multiple Times"\n`;
  csvContent += `"Simple Interest","P × r × t","Basic Interest Calculation"\n`;
  csvContent += `\n`;

  // Footer
  csvContent += `"LEGEND"\n`;
  csvContent += `"PV","Present Value","Current Value of Investment"\n`;
  csvContent += `"FV","Future Value","Projected Value of Investment"\n`;
  csvContent += `"r","Rate of Return","Annual Rate of Return"\n`;
  csvContent += `"n","Number of Periods","Number of Years/Months"\n`;
  csvContent += `"t","Time","Time Period"\n`;
  csvContent += `"P","Principal","Initial Investment Amount"\n`;
  csvContent += `\n`;
  csvContent += `"Report generated by lumpsum.in - Your trusted financial calculator"\n`;
  csvContent += `"For more calculators and tools, visit https://lumpsum.in"\n`;

  // Create and download the file
  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
  const link = document.createElement('a');
  const url = URL.createObjectURL(blob);
  link.setAttribute('href', url);
  link.setAttribute('download', `${calculatorType}_comprehensive_data_${new Date().toISOString().split('T')[0]}.csv`);
  link.style.visibility = 'hidden';
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
}

