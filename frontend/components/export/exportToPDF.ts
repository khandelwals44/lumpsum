import jsPDF from "jspdf";

interface ExportData {
  inputs: Record<string, any>;
  results: Record<string, any>;
  chartData?: any[];
}

export async function exportToPDF(
  data: ExportData,
  title: string,
  calculatorType: string
): Promise<void> {
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.getWidth();
  const margin = 20;
  let yPosition = 20;

  // Title
  doc.setFontSize(20);
  doc.setFont("helvetica", "bold");
  doc.text(title, pageWidth / 2, yPosition, { align: "center" });
  yPosition += 15;

  // Calculator type
  doc.setFontSize(12);
  doc.setFont("helvetica", "normal");
  doc.text(`Calculator: ${calculatorType}`, margin, yPosition);
  yPosition += 10;

  // Date
  doc.text(`Generated on: ${new Date().toLocaleDateString()}`, margin, yPosition);
  yPosition += 20;

  // Input Parameters
  doc.setFontSize(14);
  doc.setFont("helvetica", "bold");
  doc.text("Input Parameters:", margin, yPosition);
  yPosition += 10;

  doc.setFontSize(10);
  doc.setFont("helvetica", "normal");
  Object.entries(data.inputs).forEach(([key, value]) => {
    const text = `${key}: ${value}`;
    if (yPosition > 250) {
      doc.addPage();
      yPosition = 20;
    }
    doc.text(text, margin + 10, yPosition);
    yPosition += 7;
  });

  yPosition += 10;

  // Results
  doc.setFontSize(14);
  doc.setFont("helvetica", "bold");
  doc.text("Results:", margin, yPosition);
  yPosition += 10;

  doc.setFontSize(10);
  doc.setFont("helvetica", "normal");
  Object.entries(data.results).forEach(([key, value]) => {
    const text = `${key}: ${typeof value === 'number' ? value.toLocaleString() : value}`;
    if (yPosition > 250) {
      doc.addPage();
      yPosition = 20;
    }
    doc.text(text, margin + 10, yPosition);
    yPosition += 7;
  });

  // Footer
  doc.setFontSize(8);
  doc.text("Generated by lumpsum.in", pageWidth / 2, 280, { align: "center" });

  // Save the PDF
  const fileName = `${calculatorType}_${new Date().toISOString().split('T')[0]}.pdf`;
  doc.save(fileName);
}

