// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Level {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("USER")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  profile       UserProfile?
  goals         InvestmentGoal[]
  holdings      PortfolioHolding[]
  refreshTokens RefreshToken[]
  calculations  CalculationHistory[]
  userProgress  UserLearningProgress[]
  bookmarks     UserBookmark[]
  userBadges    UserBadge[]
  investorGuides InvestorGuide[]
  quizAnswers   UserQuizAnswer[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserProfile {
  id                    String   @id @default(cuid())
  userId                String   @unique
  age                   Int
  gender                String
  phone                 String?
  income                Float
  expenses              Float     @default(0)
  currentInvestments    Float     @default(0)
  location              String
  riskAppetite          String
  currentPortfolioValue Float
  monthlySIPCapacity    Float
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model InvestmentGoal {
  id                        String   @id @default(cuid())
  userId                    String
  name                      String
  targetAmount              Float
  timeHorizon               Int
  priority                  String
  currentSavings            Float
  monthlyContribution       Float
  expectedReturn            Float
  riskTolerance             String
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PortfolioHolding {
  id              String   @id @default(cuid())
  userId          String
  fundName        String
  fundCode        String
  units           Float
  avgCost         Float
  currentNAV      Float
  currentValue    Float
  totalReturn     Float
  totalReturnPct  Float
  sipAmount       Float?
  sipDate         DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CalculationHistory {
  id        String   @id @default(cuid())
  userId    String
  type      String
  title     String
  inputs    String   // JSON string
  results   String   // JSON string
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MutualFund {
  id              String   @id @default(cuid())
  name            String
  code            String   @unique
  category        String
  subCategory     String
  nav             Float
  navDate         DateTime
  expenseRatio    Float
  fundSize        Float
  fundAge         Int
  fundManager     String
  fundHouse       String
  rating          Int?
  riskLevel       String
  minInvestment   Float
  sipMinAmount    Float
  exitLoad        Float
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// Learning Platform Models
model LearningChapter {
  id            String   @id @default(cuid())
  title         String
  slug          String   @unique
  description   String?
  content       String   @db.Text
  level         Level    @default(BEGINNER)
  order         Int
  estimatedTime Int      // in minutes
  isActive      Boolean  @default(true)
  category      String
  tags          String   // JSON array as string
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  quizzes     ChapterQuiz[]
  progress    UserLearningProgress[]
  bookmarks   UserBookmark[]
}

model UserLearningProgress {
  id           String   @id @default(cuid())
  userId       String
  chapterId    String
  completed    Boolean  @default(false)
  timeSpent    Int      @default(0) // in minutes
  lastAccessed DateTime @default(now())
  
  user    User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  chapter LearningChapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  
  @@unique([userId, chapterId])
}

model UserBookmark {
  id        String   @id @default(cuid())
  userId    String
  chapterId String
  createdAt DateTime @default(now())
  
  user    User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  chapter LearningChapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  
  @@unique([userId, chapterId])
}

model ChapterQuiz {
  id        String   @id @default(cuid())
  chapterId String
  question  String
  options   String   // JSON array as string
  correctAnswer Int
  explanation String?
  createdAt DateTime @default(now())
  
  chapter LearningChapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  answers  UserQuizAnswer[]
}

model UserQuizAnswer {
  id        String   @id @default(cuid())
  userId    String
  quizId    String
  selectedAnswer Int
  isCorrect Boolean
  answeredAt DateTime @default(now())
  
  user User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz ChapterQuiz @relation(fields: [quizId], references: [id], onDelete: Cascade)
}

model UserBadge {
  id        String   @id @default(cuid())
  userId    String
  name      String
  description String
  icon      String
  earnedAt  DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model InvestorGuide {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String
  goals       String   // JSON array as string
  recommendations String // JSON object as string
  createdAt   DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
