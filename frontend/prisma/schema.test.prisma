// Test-specific Prisma schema for SQLite testing
// This file is used only for tests to avoid PostgreSQL dependency

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("USER")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  profile       UserProfile?
  goals         InvestmentGoal[]
  holdings      PortfolioHolding[]
  refreshTokens RefreshToken[]
  calculations  CalculationHistory[]
  userProgress  UserLearningProgress[]
  bookmarks     UserBookmark[]
  userBadges    UserBadge[]
  investorGuides InvestorGuide[]
  quizAnswers   UserQuizAnswer[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserProfile {
  id                    String   @id @default(cuid())
  userId                String   @unique
  age                   Int
  gender                String
  phone                 String?
  income                Float
  expenses              Float     @default(0)
  currentInvestments    Float     @default(0)
  location              String
  riskAppetite          String
  currentPortfolioValue Float
  monthlySIPCapacity    Float
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model InvestmentGoal {
  id                        String   @id @default(cuid())
  userId                    String
  name                      String
  targetAmount              Float
  timeHorizon               Int
  priority                  String
  currentSavings            Float
  monthlyContribution       Float
  projectedValue            Float
  requiredMonthlyInvestment Float
  deadline                  DateTime?
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt

  user                User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  recommendations     FundRecommendation[]
}

model PortfolioHolding {
  id        String  @id @default(cuid())
  userId    String
  fundId    String
  units     Float   @default(0)
  avgCost   Float   @default(0)
  sipAmount Float   @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FundRecommendation {
  id          String   @id @default(cuid())
  goalId      String
  fundId      String
  fundName    String
  allocation  Float
  riskLevel   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  goal InvestmentGoal @relation(fields: [goalId], references: [id], onDelete: Cascade)
}

model RefreshToken {
  id         String   @id @default(cuid())
  userId     String
  token      String   @unique
  expiresAt  DateTime
  revokedAt  DateTime?
  createdAt  DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CalculationHistory {
  id         String   @id @default(cuid())
  userId     String
  calcType   String
  inputJson  String   // JSON string of inputs
  outputJson String   // JSON string of outputs
  createdAt  DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MutualFund {
  id            String   @id @default(cuid())
  name          String
  category      String
  subCategory   String
  assetClass    String
  riskLevel     String
  expenseRatio  Float
  nav           Float
  fundSize      Float
  minInvestment Float
  benchmark     String
  fundManager   String
  inceptionDate DateTime
  isActive      Boolean  @default(true)
  oneYearReturn Float?
  threeYearReturn Float?
  fiveYearReturn Float?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model LearningChapter {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  description String
  content     String   // JSON content with sections, examples, charts
  level       String   // BEGINNER, INTERMEDIATE, ADVANCED, PROFESSIONAL
  category    String   // BASICS, INVESTMENT, DISTRIBUTOR, RESEARCH
  order       Int
  estimatedTime Int    // minutes
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  userProgress UserLearningProgress[]
  bookmarks    UserBookmark[]
  quizzes      ChapterQuiz[]
}

model ChapterQuiz {
  id        String   @id @default(cuid())
  chapterId String
  question  String
  options   String   // JSON array of options
  correctAnswer Int
  explanation String?
  order     Int
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  
  // Relations
  chapter LearningChapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  userAnswers UserQuizAnswer[]
  
  @@unique([chapterId, order])
}

model UserLearningProgress {
  id        String   @id @default(cuid())
  userId    String
  chapterId String
  completed Boolean  @default(false)
  progress  Float    @default(0) // 0-100 percentage
  timeSpent Int      @default(0) // seconds
  lastAccessed DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user    User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  chapter LearningChapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  
  @@unique([userId, chapterId])
}

model UserBookmark {
  id        String   @id @default(cuid())
  userId    String
  chapterId String
  sectionId String?  // specific section within chapter
  note      String?  // user's note
  createdAt DateTime @default(now())
  
  // Relations
  user    User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  chapter LearningChapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserQuizAnswer {
  id        String   @id @default(cuid())
  userId    String
  quizId    String
  answer    Int
  isCorrect Boolean
  answeredAt DateTime @default(now())
  
  // Relations
  user User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz ChapterQuiz @relation(fields: [quizId], references: [id], onDelete: Cascade)
  
  @@unique([userId, quizId])
}

model UserBadge {
  id        String   @id @default(cuid())
  userId    String
  badgeType String   // CHAPTER_COMPLETE, QUIZ_MASTER, STREAK_7_DAYS, etc.
  badgeName String
  badgeDescription String
  earnedAt  DateTime @default(now())
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model InvestorGuide {
  id        String   @id @default(cuid())
  userId    String
  title     String
  content   String   // JSON structured content
  goals     String   // JSON array of user goals
  riskProfile String
  timeHorizon String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
